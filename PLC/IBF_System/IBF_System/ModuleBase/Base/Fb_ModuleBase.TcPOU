<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Fb_ModuleBase" Id="{e3f07cb2-eb83-4b34-9aad-2d4595c2aa5d}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK PUBLIC ABSTRACT Fb_ModuleBase
VAR_INPUT
	nModuleID			: 	UINT 	:= 1 	; // module reference number used for fault, enable, reset, and safety functions (default := 1, 0 = main system)
	// main system Inputs
	bEnable				: 	BOOL	:= FALSE ; // (autolinked) module enable 	
	bCmdReset 			: 	BOOL	:= FALSE ; // (AutoLinked) reset all faults 
	bCmdPause			: 	BOOL 	:= FALSE ; // Pause command	bCmdToStart			
END_VAR
VAR_OUTPUT
	stIdentity			: UDT_Identity;
	bAddedToSystem		: BOOL 		:= FALSE 			; // module has been added to the system

	// Fault indications
	bReqPause		: BOOL := FALSE ; // Request for auto cycle pause
	bReqContinue	: BOOL := FALSE ; // Request for auto cycel continue
	// Check values
	bReferenceOk	: BOOL := FALSE ; // All module references  have been checked
	// State indication
	bIsSafe			: BOOL := FALSE ; // Module is safe and locked until safety is ok
	bInitialized	: BOOL := FALSE ; // Module startup initialized waiting for startup command
	bHomed 			: BOOL := FALSE ; // Module startup homed waiting for further further commands

	bHeld	 		: BOOL := FALSE ; // Module Hold Motion is held until command is released	
	
	bResetDone 		: BOOL := FALSE ; // Module reset is done   
	
	bManual 		: BOOL := FALSE ; // Module Work status Module in Manual
	bSemiAuto		: BOOL := FALSE ; // Module work status in semi automatic
	bStartAuto		: BOOL := FALSE ; // Module start automatic cycle 
	bAutomatic 		: BOOL := FALSE ; // Module Work status Module in Automatic mode
	bPaused			: BOOL := FALSE ; // Module paused
	bStopAuto		: BOOL := FALSE ; // Module Stop automatic
	bStopping		: BOOL := FALSE ; // MOdule stopping auto cycle
	
	bLocked			: BOOL := FALSE ; // module is locked for commands
END_VAR
VAR 
	// Internal functions 
	ReCmdReset 			: R_TRIG ;
	// Persistent data
	bCmdWritePersistent : BOOL := FALSE ; // write persistent data to memory
	// Module data
	stFault			: UDT_Fault			; // Message data
	// Function path 
	{attribute 'instance-path'} 
    {attribute 'noinit'}
	sPath				: STRING	; // Path name of function (used for manual reference)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Get device name from function
IF stIdentity.sName = '' THEN 
	stIdentity.nId := nModuleID;
	stIdentity.sName := F_FBNameFromPath(sPath := sPath);
END_IF

// Add module to system
IF NOT bAddedToSystem THEN
	bAddedToSystem S= SystemBase.CmdAddModule(refToModule := THIS^);
	RETURN;
END_IF

IF NOT bReferenceOk THEN 
	bReferenceOk S= CheckReferences();
	RETURN;
ELSE 
	// Execute functions
	ExecMainBaseFunctions();
END_IF

// Reset pause request 
bReqPause 		R= bPaused ;
bReqContinue    R= NOT bPaused 	;]]></ST>
    </Implementation>
    <Folder Name="Commands" Id="{23a18ca6-8b05-47e8-8c4b-aa1afa1e892a}" />
    <Folder Name="Execute" Id="{f0dd53fd-6b62-4b4d-9761-2507a7488bb2}" />
    <Folder Name="Private" Id="{c399b340-fa14-4baf-a6f6-90d72fec9257}" />
    <Method Name="CallComponents" Id="{22be9b1f-00c3-4e1c-90f8-f2ff5645fc88}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT CallComponents : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCollision" Id="{8d738489-b236-4612-b552-096d24330292}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT CheckCollision : BOOL // Checks device commands for positble collisions  and block if necesarry
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckReferences" Id="{fd109a63-20a0-4b77-ba3e-d36429660f9a}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PUBLIC CheckReferences : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bReferenceOk := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdAutomatic" Id="{12a5af10-cb9c-42e0-8f13-2adc898b5d5a}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD INTERNAL CmdAutomatic : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// CmdAutomatic follows a different pattern than CmdSemiAuto, because Automatic mode can receive start/stop commands.
// Therefore, ExecAutomatic is called by ExecMainBaseFunctions instead of this method.
IF NOT bAutomatic THEN 
	bStartAuto 		:= TRUE ;
	bStopping		:= FALSE;
END_IF 

bSemiAuto	:= FALSE;
bManual		:= FALSE;

CmdAutomatic 	:= bAutomatic;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdEnable" Id="{53f7bfc5-68f1-04e1-3cfc-7dd9418a3521}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD INTERNAL CmdEnable
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExecEnable();

bSemiAuto	:= FALSE;
bAutomatic 	:= FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdEstop" Id="{d05300f1-aa34-43f5-a9f7-94f7856dd9ba}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD INTERNAL CmdEstop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExecSafeStop();
bSemiAuto	:= FALSE;
bAutomatic 	:= FALSE;
bManual		:= FALSE;

CmdEstop := bIsSafe ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdHold" Id="{ab17051c-ea15-419f-9ada-82ef46f33e0a}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD INTERNAL CmdHold : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExecHold();

CmdHold := bHeld ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdHome" Id="{3a000da5-5c20-4ff2-8583-74c7fae87bc2}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Internal CmdHome : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExecHome();

CmdHome := bHomed;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdIdle" Id="{2362863a-75a6-053c-3279-14d3ffe7bf63}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD INTERNAL CmdIdle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExecIdle();

bSemiAuto	:= FALSE;
bAutomatic 	:= FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdInit" Id="{83c2609c-15fb-4eeb-beb4-42411df76941}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD INTERNAL CmdInit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExecInit();

CmdInit := bInitialized;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdManual" Id="{7a18f16c-cb69-42f0-ab80-bae80d368991}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Internal CmdManual : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExecManual();

bSemiAuto	:= FALSE;
bAutomatic 	:= FALSE;

CmdManual := bManual;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdSemiAuto" Id="{791a75b1-1408-4ba1-a250-3359f3233728}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD INTERNAL CmdSemiAuto : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExecSemiAuto();

bAutomatic 	:= FALSE;
bManual		:= FALSE;

CmdSemiAuto := bSemiAuto;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdStopAutomatic" Id="{e74f682d-372f-4947-8bd2-68348e1c28f7}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD INTERNAL CmdStopAutomatic : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bAutomatic THEN 
	bStartAuto 		:= FALSE ;
	bStopAuto 		:= TRUE ;
END_IF 

CmdStopAutomatic 	:= NOT bAutomatic;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecAutomatic" Id="{60275d51-07c9-40b6-9565-a211f029bc96}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT ExecAutomatic : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecBaseFunctions" Id="{9ca3b82c-fc59-4a02-b721-3d67056da31e}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT ExecBaseFunctions : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecEnable" Id="{7334e61e-66b3-055f-220e-5ce8c308e462}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT ExecEnable
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecFaultHandling" Id="{98e653af-0f09-41a0-bb7f-7370a5927e63}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD ExecFaultHandling : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Call message function
	GVL_Utilities.fbFaultHandler.CmdAddFault( stFault := stFault, stIdentity);

// Call reset functions
	ReCmdReset( CLK := bCmdReset);
	
	IF ReCmdReset.Q THEN 
		bResetDone := FALSE ;
	ELSIF NOT bResetDone THEN 
		IF bInitialized THEN
			bResetDone := ExecReset() AND GVL_Utilities.fbFaultHandler.CmdReset();
		ELSE
			bResetDone := TRUE ;		
		END_IF
	END_IF
	
	bCmdReset := FALSE ;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecHold" Id="{0018095c-5f39-4db3-b3d8-dd0243064ada}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT ExecHold : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecHome" Id="{50f16f13-6654-4092-b3f6-5fd77273a5a8}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT ExecHome : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecIdle" Id="{e1fcc6e8-6908-0408-1b21-e88506379db1}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT ExecIdle
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecInit" Id="{6bbf633c-be70-4b2b-b0ef-e1874d2714eb}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT ExecInit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecMainBaseFunctions" Id="{e7f3087e-94c4-4f9d-9692-e5a0969e6fe3}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD INTERNAL ExecMainBaseFunctions : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Call fault handling function 
ExecFaultHandling();

// Check for any Internal collisions
IF bInitialized THEN
	CheckCollision();
END_IF

// Call components 
CallComponents();

//// Run automatic function 
IF bStopAuto OR bStopping THEN 
	bStopping 	:= ExecAutomatic();
	bAutomatic  := FALSE;
	bStopAuto	:= FALSE;
	bStartAuto 	:= FALSE;
ELSIF bStartAuto OR bAutomatic THEN 
	bAutomatic 	:= ExecAutomatic();
	bStartAuto 	:= FALSE;
END_IF

// Run Base Functions 
IF bInitialized 
AND bEnable
AND bHomed 
AND NOT bManual THEN 
	ExecBaseFunctions();
END_IF

// Persistent data 
IF bCmdWritePersistent THEN 
	bCmdWritePersistent R= DataManager.FbPersistentManager.Write();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecManual" Id="{63d94b51-c5c2-4d65-84f7-21d85d57b86f}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT ExecManual : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecReset" Id="{16710407-862f-42d6-b9d2-79f884d2291c}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT ExecReset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSafeStop" Id="{6444f87d-3200-4afd-ac19-66712355365b}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT ExecSafeStop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSemiAuto" Id="{6d784c7b-e589-424b-8150-d725f6353df0}" FolderPath="Execute\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT ExecSemiAuto : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>