<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="SystemBase" Id="{147e2f75-a8ca-43e4-acf3-ce2169ee9c02}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
PROGRAM SystemBase // System base program, from here all modules are controlled and the system functions are called.
VAR_INPUT // System configuration settings
	bIcfAirCheckPresent	: BOOL := TRUE; // System is equipped with air pressure sensor 
END_VAR
VAR_OUTPUT
	// Check values
	bReferenceOk		: BOOL := FALSE ; // All module references  have been checked

	// State indication
	bIsSafe				: BOOL := FALSE ; // Module is safe and locked until safety is ok

	bInitializing		: BOOL := FALSE ; // Module startup initializing
	bInitialized		: BOOL := FALSE ; // Module startup initialized waiting for startup command
	
	bParametersLoaded 	: BOOL := FALSE ; // Parameters have been loaded from the file(s) 

	bIdle 				: BOOL := FALSE ; // Module startup Idle no commands active

	bEnabling 			: BOOL := FALSE ; // Module Startup enabeling 
	bEnabled 			: BOOL := FALSE ; // Module Startup Enabled
	
	bHoming				: BOOL := FALSE ; // Module startup homing back to base position and recalibrate
	bHomed 				: BOOL := FALSE ; // Module startup homed waiting for further further commands

	bHolding 			: BOOL := FALSE ; // Module Module Hold motion command executing
	bHeld	 			: BOOL := FALSE ; // Module Hold Motion is held until command is released	
	
	bResetting 			: BOOL := FALSE ; // Module Reset resetting error status
	bResetDone 			: BOOL := FALSE ; // Module reset is done   

	bManual 			: BOOL := FALSE ; // Module Work status Module in Manual 
	
	bStartSemiAuto		: BOOL := FALSE ; // Start semi automatic mode 
	bSemiAuto			: BOOL := FALSE ; // Module work status module in semi automatic
	
	bStartAuto			: BOOL := FALSE ; // Start automatic mode
	bAutomatic 			: BOOL := FALSE ; // Module Work status Module in Automatic mode
	bStopAuto			: BOOL := FALSE ; // Stop automatic mode
	bStoppingAuto		: BOOL := FALSE ; // Stopping automatic mode
	
	bCmdPause			: BOOL := FALSE ; // Pause all modules 
	bPaused 			: BOOL := FALSE ; // all modules are paused
	
	bModuleLocked		: BOOL := FALSE ; // a module is locked for commands
END_VAR
VAR
	// System inputs 
	ibPowerSupplyOk	 	AT%I*	: BOOL  ; // System Power supply is ok 
	fbAirpressureOk 			: Fb_DevDigitalInputFunctions  	; // system airpressure is ok

	// Air handling
	fbValveMainAirSupply		: FB_DevValve ; // Main air supply valve 
	toffMainAir					: TOF	:= (PT := T#500MS ); // Main air supply off delay
	bAirOk						: BOOL := FALSE ; // Air pressure is ok 
	
	// System HMI commands
	fbStartSemiAuto				: FB_DevHMIButton ; // HMI start semi automatic button 
	fbStartAuto					: FB_DevHMIButton ; // HMI start automatic button

	// System commands 
	fbCmdStartSystem		 	: FB_DevPushbuttonLight  		; // (re)start system input from button
	fbCmdStartAuto				: FB_DevPushbuttonLight			; // Start system automatic cycle
	fbCmdStopAuto				: FB_DevPushbuttonLight			; // Start system automatic cycle
	fbCmdReset		 			: FB_DevPushbuttonLight 		; // System reset
	
	// System state
	eStateSystem				: E_StateSystem := E_StateSystem.FirstCycle; // State of system
	
	// Set system variables
	fbSetSystemVariables		: Fb_SystemVariables ;
	
	// Local faults (always fatal)
	stFault						: UDT_Fault := (FaultType := E_FaultTypes.FF); 

 	// Module states
	nNumberOfModules			: UDINT := 0 ; // Number of modules added to the system 
	arpModules					: ARRAY [1..GVL_System.cnMaxNUMBEROFMODULES] OF Udt_ModuleId ; 

	// Power down system function
	fTrigPowerSupply			: F_TRIG ; // falling edge trigger for power supply
	ntShutDown					: NT_Shutdown ; // shutdown system function 
END_VAR
VAR // safety 
	// inputs 
	ibEstopOk 			AT%I*	: BOOL  ; // System emergency stop ok
	ibSafetyFBErr		AT%I*	: BOOL	; // The "FB Error" group signal
	ibSafetyComErr		AT%I*	: BOOL	; // The "Com Error" group signal
	
	// Outputs 
	qbSafetyErrAckn		AT%Q*	: BOOL ; // Safety error acknowledge
	qbRunSafety			AT%Q*	: BOOL ; // Run safety program
	qbResetSafety		AT%Q*	: BOOL ; // Reset safety program

	// safety Reset Timer	
	TofSafetyErrAck				: TOF := (PT := T#500MS); // Safety reset timer
END_VAR
VAR // Miscellaneous
	stIdentity 		: UDT_Identity := (sName := 'System');
	bCmdResetBusy 	: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Call system functions 
CallSystemFunctions();

// Execute fault handing
ExecFaultHandling();

// Handle UPS
ExecUPS();

// Execute safety control (controls E-Stop safety modules and enables air supply)
ExecSafetyControl();

// Call modules 
CallModules();

// Call manual control handler (must be done after calling modules, otherwise bCmdManual will toggle
IBF_Devices.GVL_Devices.fbManualController(bBlockManualMode := (eStateSystem <> E_StateSystem.Manual));

// Execute state machine
ExecSystemRun();
]]></ST>
    </Implementation>
    <Folder Name="ModuleFunctions" Id="{fb1414af-f6e5-4202-8989-256aa0d1eacc}" />
    <Folder Name="SystemFunction" Id="{05994c64-d0aa-4e7d-8ae3-f139ae256daf}" />
    <Method Name="CallModules" Id="{7e8c963f-d98c-43d0-a3ed-11f16c2d5b4d}" FolderPath="ModuleFunctions\">
      <Declaration><![CDATA[METHOD PRIVATE CallModules : BOOL
VAR
	i : UDINT ;
END_VAR
VAR
	AllAutomatic : BOOL ;
	Stopping : BOOL;
	bAllStopped : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// set base conditions
bReferenceOk	:= TRUE ;
bIsSafe			:= TRUE ;
bIdle			:= TRUE ;	
bHeld			:= TRUE ;
bResetDone 		S= bResetting	;
bManual			:= TRUE	;
bSemiAuto		:= TRUE ;
bAutomatic		:= FALSE; // Reverse feedback 
AllAutomatic 	:= TRUE ;
bStoppingAuto	:= TRUE ;
bEnabled		S= bEnabling ;
bHomed 			:= TRUE;
bPaused 		:= TRUE;
bAllStopped     := TRUE;

// copy inputs to modules 
FOR i := 1 TO nNumberOfModules DO 
	// set system commands
	arpModules[i].pFunction^.bEnable			:= bEnabled			;
	arpModules[i].pFunction^.bCmdReset			:= bResetting		;
	arpModules[i].pFunction^.bCmdPause			:= bCmdPause		; 
	// Read state indications 
	bReferenceOk 	R= NOT arpModules[i].pFunction^.bReferenceOk; 
	bIsSafe 		R= NOT arpModules[i].pFunction^.bIsSafe;
	bEnabled 		R= NOT arpModules[i].pFunction^.bEnable;
	bHeld			R= NOT arpModules[i].pFunction^.bHeld;
	bResetDone		R= NOT arpModules[i].pFunction^.bResetDone;
	bManual			R= NOT arpModules[i].pFunction^.bManual;
	bSemiAuto		R= NOT arpModules[i].pFunction^.bSemiAuto;
	bHomed			R= NOT arpModules[i].pFunction^.bHomed;
	bPaused			R= NOT arpModules[i].pFunction^.bPaused;
	bModuleLocked	S= arpModules[i].pFunction^.bLocked			; // Module is locked for commands
	bCmdPause 		R= arpModules[i].pFunction^.bReqContinue	; // Request continue from module
	bCmdPause		S= arpModules[i].pFunction^.bReqPause		; // Request for pause from module
	bAutomatic		S= arpModules[i].pFunction^.bAutomatic 		; // Stay in automatic even when one module is in automatic
	AllAutomatic	R= NOT arpModules[i].pFunction^.bAutomatic	; // reset start automatic when al modules are in automatic operation
	bStoppingAuto	R= NOT arpModules[i].pFunction^.bStopping;

	Stopping		:= arpModules[i].pFunction^.bStopping;
	
	bAllStopped     := NOT Stopping AND NOT bAutomatic AND bAllStopped;
END_FOR

// Reset start inputs
	bEnabling		R= bEnabled 	;
	bHolding		R= bHeld 		;
	bResetting		R= bResetDone 	;
	bStartSemiAuto	R= bSemiAuto	;
	bHoming			R= bHomed 		;
	bStartAuto		R= AllAutomatic	; 
	bStopAuto		R= bAllStopped	;
	bCmdPause		R= NOT bAutomatic	;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CallSystemFunctions" Id="{5be4e1d6-b194-4082-99a1-645b475d1410}" FolderPath="SystemFunction\">
      <Declaration><![CDATA[METHOD PRIVATE CallSystemFunctions : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Update system variables 
fbSetSystemVariables();

// Call global parameter handler
GVL_Parameters.fbParameterHandler();

// Check air pressure
IF bIcfAirCheckPresent THEN
	fbAirpressureOk();
	bAirOk := fbAirpressureOk.bFcoDelay ;
ELSE
	bAirOk := TRUE ;
END_IF

// Execute button functions 
fbStartAuto		(tDelay	:= T#100MS, bEmbedded := TRUE);
fbStartSemiAuto (tDelay	:= T#100MS, bEmbedded := TRUE); 
fbCmdReset 		(tDelay	:= T#5000MS, bEmbedded := TRUE); 
fbCmdStartSystem(bEmbedded := TRUE);
fbCmdStartAuto	(bEmbedded := TRUE);
fbCmdStopAuto	(bEmbedded := TRUE);

// Reset button (lamp)
IF (GVL_Utilities.fbFaultHandler.nActiveFaults > 0) THEN
	IF GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.FF] THEN
		// Fatal fault
		fbCmdReset.CmdOn() ;
	ELSIF GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.CF] THEN
		// Cycle fault
		fbCmdReset.CmdBlinkSlow() ;
	ELSIF NOT GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.OM] THEN
		// Warning
		fbCmdReset.CmdBlinkFast() ;
	END_IF
END_IF

// execute input functions
fbValveMainAirSupply(	bEnable			:= TRUE,
						refFbManualCtrl	:= IBF_Devices.GVL_Devices.fbManualController);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdAddModule" Id="{02c45d8a-a400-4bf9-96fe-fbe272a81730}">
      <Declaration><![CDATA[METHOD PUBLIC CmdAddModule : BOOL
VAR_INPUT
	refToModule : REFERENCE TO Fb_ModuleBase ; // reference to module function
END_VAR
VAR
	bModuleAdded	: BOOL := FALSE;
	i 				: UDINT ; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check if device is not already in the array 
FOR i:= 1 TO GVL_System.cnMaxNUMBEROFMODULES DO
	IF arpModules[i].pFunction = 0 THEN 
		nNumberOfModules:= i;
		EXIT;	
	ELSIF arpModules[i].sName = refToModule.stIdentity.sName THEN 
		bModuleAdded := TRUE ;
	END_IF 
END_FOR

// If device is not found add device to the list
IF NOT bModuleAdded AND nNumberOfModules >= 1 AND nNumberOfModules <= GVL_System.cnMaxNUMBEROFMODULES THEN
	arpModules[nNumberOfModules].nNumber 	:= refToModule.nModuleID;
	arpModules[nNumberOfModules].sName		:= refToModule.stIdentity.sName	;
	arpModules[nNumberOfModules].pFunction 	:= ADR(refToModule)		;	
	bModuleAdded := TRUE ;
END_IF

CmdAddModule := bModuleAdded ; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdReset" Id="{81a11f00-ce22-44b4-b332-2d4b7e3055ba}">
      <Declaration><![CDATA[METHOD CmdReset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eStateSystem := E_StateSystem.Resetting;

CmdReset := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecAutomatic" Id="{3c758811-81f1-42d1-83e5-646cc80a7b4f}" FolderPath="ModuleFunctions\">
      <Declaration><![CDATA[METHOD PRIVATE ExecAutomatic : BOOL
VAR_INPUT
END_VAR
VAR
	i : UDINT ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bStopAuto THEN 
	FOR i := 1 TO nNumberOfModules DO 
		arpModules[i].pFunction^.CmdStopAutomatic() ;
	END_FOR
ELSIF bStartAuto THEN 
	// Run automatic function in 
	FOR i := 1 TO nNumberOfModules DO 
		arpModules[i].pFunction^.CmdAutomatic() ;
	END_FOR
END_IF
	
ExecAutomatic := NOT bStartAuto;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecEnable" Id="{cd139c8b-3639-05ff-18d3-b0a09f057af4}" FolderPath="ModuleFunctions\">
      <Declaration><![CDATA[METHOD INTERNAL ExecEnable
VAR
	i : UDINT ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bEnabling := TRUE;

// Run module enable function
FOR i := 1 TO nNumberOfModules DO 
	arpModules[i].pFunction^.CmdEnable() ;
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecFaultHandling" Id="{4f8ea78e-6627-05b4-0046-c75f4d368b89}" FolderPath="SystemFunction\">
      <Declaration><![CDATA[METHOD PRIVATE ExecFaultHandling
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Register system faults
GVL_Utilities.fbFaultHandler.CmdAddFault(stFault := stFault, stIdentity);

// Call global fault handler
GVL_Utilities.fbFaultHandler();

// Reset command
bCmdResetBusy S= fbCmdReset.bFeStatus;
IF bCmdResetBusy THEN
	bCmdResetBusy R= GVL_Utilities.fbFaultHandler.CmdReset();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecHoming" Id="{345df0e0-469c-4aba-9303-ad14c7d3f6d3}" FolderPath="ModuleFunctions\">
      <Declaration><![CDATA[METHOD PRIVATE ExecHoming : BOOL
VAR_INPUT
END_VAR
VAR
	i : UDINT ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Home all modules
FOR i := 1 TO nNumberOfModules DO 
	IF NOT arpModules[i].pFunction^.bHomed THEN 
		arpModules[i].pFunction^.CmdHome();
	END_IF
END_FOR
 
bHoming := NOT bHomed;
ExecHoming := bHomed;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecIdle" Id="{99429c16-d58c-06e5-35f0-4f12bc722d3c}" FolderPath="ModuleFunctions\">
      <Declaration><![CDATA[METHOD INTERNAL ExecIdle
VAR
	i : UDINT ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbCmdStartSystem.CmdBlinkSlow();

// Run module idle function
FOR i := 1 TO nNumberOfModules DO 
	arpModules[i].pFunction^.CmdIdle() ;
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecManual" Id="{1eeb2405-fd6d-491e-8ef7-e639f5684ed3}" FolderPath="ModuleFunctions\">
      <Declaration><![CDATA[METHOD PUBLIC ExecManual : BOOL
VAR
	i : UDINT ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bEnabled := FALSE ;
FOR i := 1 TO nNumberOfModules DO 
	arpModules[i].pFunction^.CmdManual() ;
END_FOR

ExecManual := bManual;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSafeHold" Id="{09e80f99-469c-4643-bf23-6284454a47bf}" FolderPath="ModuleFunctions\">
      <Declaration><![CDATA[METHOD PRIVATE ExecSafeHold : BOOL
VAR_INPUT
END_VAR
VAR
	i : UDINT ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Hold all modules
bStartAuto		:= FALSE;

FOR i := 1 TO nNumberOfModules DO 
	arpModules[i].pFunction^.CmdHold();
END_FOR

ExecSafeHold := bHeld ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSafeReset" Id="{1f949173-b753-460e-b2f0-a3f94b7a8c12}" FolderPath="ModuleFunctions\">
      <Declaration><![CDATA[METHOD PRIVATE ExecSafeReset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSafeStop" Id="{231fd871-3511-471c-84e1-00de0d5b0d2d}" FolderPath="ModuleFunctions\">
      <Declaration><![CDATA[METHOD PRIVATE ExecSafeStop : BOOL
VAR_INPUT
END_VAR
VAR
	i : UDINT ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bEnabling		:= FALSE;
bInitializing	:= FALSE;
bHoming			:= FALSE;
bStartAuto		:= FALSE;
bStartSemiAuto	:= FALSE;

// Module safe stop
IF bInitialized AND bReferenceOk THEN 
	FOR i := 1 TO nNumberOfModules DO 
		arpModules[i].pFunction^.CmdEstop();
	END_FOR
END_IF

// Shut down air supply once all modules are safe
IF bIsSafe THEN 
	fbValveMainAirSupply.CmdSafeStop();
END_IF
 
ExecSafeStop := bIsSafe ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSafetyControl" Id="{8ec10b67-53de-4590-9578-2159b6a13b3f}" FolderPath="SystemFunction\">
      <Declaration><![CDATA[METHOD PRIVATE ExecSafetyControl: BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Trigger system faults
// NOTES: some faults trigger a automatic safety circuit reset

// Not safe, until proven otherwise
stFault.Active := TRUE;
stFault.FaultType := E_FaultTypes.FF;

IF ibSafetyFBErr THEN 
	IF NOT qbRunSafety AND NOT TofSafetyErrAck.Q THEN 
		qbSafetyErrAckn := TRUE; 
	END_IF
	stFault.Description	:= 'Safety module function block error';

ELSIF ibSafetyComErr THEN
	IF NOT qbRunSafety AND NOT TofSafetyErrAck.Q THEN 
		qbSafetyErrAckn := TRUE ;
	END_IF
	stFault.Description	:= 'Safety module communication fault';

ELSIF (NOT ibEstopOk) AND (bInitialized OR bInitializing) THEN
	stFault.Description	:= 'Emergency stop pressed';

ELSIF (NOT bAirOk) AND (bInitialized OR bInitializing) THEN
	stFault.Description	:= 'Main air pressure low';
	
ELSE // Everything OK!
	stFault.Active := FALSE;
END_IF

// Show emergency overlay (a modal HMI overlay which blocks all HMI functionality)
// when a fault is active
IBF_HMI.GVL_HMI.fbHMIControl.sEmergencyText := stFault.Description;
IBF_HMI.GVL_HMI.fbHMIControl.bShowEmergencyOverlay	:= stFault.Active;

// Set safety system in run mode
IF NOT ibSafetyFBErr 
	AND NOT ibSafetyComErr
	AND bInitialized 
THEN 
	qbRunSafety := TRUE ;
ELSE 
	qbRunSafety := FALSE;
END_IF

// Reset safety faults
TofSafetyErrAck(IN := qbSafetyErrAckn);
qbSafetyErrAckn := FALSE ;
qbResetSafety := fbCmdReset.bFeStatus;

// Air pressure
toffMainAir(IN := ibEstopOk);
IF toffMainAir.Q THEN
	fbValveMainAirSupply.CmdOpen();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSemiAuto" Id="{d1439c2c-5160-4c2a-96fa-c7dd6421b071}" FolderPath="ModuleFunctions\">
      <Declaration><![CDATA[METHOD PUBLIC ExecSemiAuto : BOOL
VAR
	i : UDINT ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Run automatic function in 
FOR i := 1 TO nNumberOfModules DO 
	arpModules[i].pFunction^.CmdSemiAuto() ;
END_FOR

ExecSemiAuto := bSemiAuto;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSystemRun" Id="{504c7dee-e26b-448e-99d5-004a6dc8da1e}" FolderPath="SystemFunction\">
      <Declaration><![CDATA[METHOD INTERNAL ExecSystemRun
VAR
	bError : BOOL; // An error is active (fatal fault or cycle fault)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check if there are any high-prio faults
bError := GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.CF] OR GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.FF];

// Default home screen
IBF_HMI.GVL_HMI.fbHMIControl.eHomeScreen := E_BaseVisu.Idle;

// State machine 
CASE eStateSystem OF 
	E_StateSystem.FirstCycle:
		eStateSystem 	:= E_StateSystem.CheckReferences;

	E_StateSystem.CheckReferences:
		IF bReferenceOk THEN
			eStateSystem 	:= E_StateSystem.Initialize ;
		END_IF

	E_StateSystem.Initialize:
		IF Init() THEN
			eStateSystem := E_StateSystem.LoadParameters;
		END_IF

	E_StateSystem.LoadParameters:
		bParametersLoaded := GVL_Parameters.fbParameterHandler.Init();
		IF GVL_Parameters.fbParameterHandler.bFault THEN
			stFault.Active := TRUE;
			stFault.FaultType := E_FaultTypes.OW;
			stFault.Description := CONCAT('ParameterHandler: ', GVL_Parameters.fbParameterHandler.sFaultDescription);
			eStateSystem := E_StateSystem.Safe ;
		ELSIF bParametersLoaded THEN
			eStateSystem := E_StateSystem.Safe ;
		END_IF

	E_StateSystem.Safe:
		IF bIsSafe AND ibEstopOk THEN 
			IF bError THEN
				eStateSystem := E_StateSystem.Fault ;
			ELSE
				eStateSystem := E_StateSystem.Enable;
			END_IF
		ELSIF fbCmdReset.bFeStatus THEN
			eStateSystem	:= E_StateSystem.Resetting;
		ELSE 
			ExecSafeStop();
		END_IF

	E_StateSystem.Enable:
		ExecEnable();
		IF bError THEN
			eStateSystem := E_StateSystem.Fault;
		ELSIF GVL_HMI.fbHMIControl.bInScreenManual THEN
			eStateSystem := E_StateSystem.Manual ;
		ELSIF bEnabled THEN 
			fbCmdStartSystem.CmdBlinkFast();
			IF fbCmdReset.bFeStatus THEN
				eStateSystem := E_StateSystem.Resetting ;
			ELSIF fbCmdStartSystem.bFeStatus THEN
				eStateSystem := E_StateSystem.Home ;
			END_IF
		END_IF

	E_StateSystem.Home:	
		IF bError THEN
			eStateSystem := E_StateSystem.Fault;
		ELSIF fbCmdReset.bFeStatus THEN
			eStateSystem := E_StateSystem.Safe;			
		ELSIF ExecHoming() THEN
			eStateSystem := E_StateSystem.Idle;
		END_IF

	E_StateSystem.Resetting:
		IF NOT bResetDone THEN 
			bResetting S= TRUE ;
		ELSIF NOT bIsSafe THEN 
			eStateSystem := E_StateSystem.Safe ;
		ELSIF bError THEN
			IF NOT bCmdResetBusy THEN
				eStateSystem := E_StateSystem.Fault ;
			END_IF
		ELSIF bHomed AND bEnabled THEN
			eStateSystem := E_StateSystem.Idle ;
		ELSE 
			eStateSystem := E_StateSystem.Enable ;
		END_IF

	E_StateSystem.Idle:
		ExecIdle();
		IF bError THEN
			eStateSystem := E_StateSystem.Fault;
		ELSIF fbCmdReset.bFeStatus THEN
			eStateSystem := E_StateSystem.Resetting;			
		ELSIF GVL_HMI.fbHMIControl.bInScreenManual THEN 
			eStateSystem := E_StateSystem.Manual ;
		ELSIF fbCmdStartSystem.bFeStatus THEN 
			eStateSystem := E_StateSystem.SemiAuto ;
		END_IF

	E_StateSystem.Manual:
		IF bError THEN
			eStateSystem := E_StateSystem.Fault;
		ELSIF fbCmdReset.bFeStatus THEN
			eStateSystem := E_StateSystem.Safe;			
		ELSIF IBF_Devices.GVL_Devices.fbManualController.bActive THEN
			ExecManual();
		END_IF
		
		IF NOT GVL_HMI.fbHMIControl.bInScreenManual THEN
			EStateSystem := E_StateSystem.Enable;
		END_IF 

	E_StateSystem.SemiAuto:
		ExecSemiAuto();
		IBF_HMI.GVL_HMI.fbHMIControl.eHomeScreen := E_BaseVisu.SemiAutomatic;
		IF bError THEN
			eStateSystem := E_StateSystem.Fault;
		ELSIF fbCmdReset.bFeStatus THEN
			eStateSystem := E_StateSystem.Idle;			
		ELSIF (fbCmdStartAuto.bFeStatus 
			OR fbStartAuto.bFcoDelay 
			OR bAutomatic)
		AND NOT bModuleLocked THEN 
			bStartAuto 		:= TRUE ;
			bStopAuto 		:= FALSE;
			eStateSystem 	:= E_StateSystem.Automatic ;
		END_IF					

	E_StateSystem.Automatic:
		ExecAutomatic();
		IBF_HMI.GVL_HMI.fbHMIControl.eHomeScreen := E_BaseVisu.Automatic;
		IF bError THEN
			eStateSystem := E_StateSystem.Fault;
		ELSIF fbCmdReset.bFeStatus THEN
			eStateSystem := E_StateSystem.Safe;
		ELSIF bAutomatic THEN
			IF fbCmdStartSystem.bFeStatus THEN
				eStateSystem := E_StateSystem.Idle ;
			ELSIF fbCmdStopAuto.bFeStatus THEN
				bStopAuto := TRUE;
			ELSIF fbCmdStartAuto.bFeStatus OR GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.MC] THEN  
				bCmdPause 	:= NOT bPaused ;
			END_IF
		ELSIF NOT bStartAuto AND NOT bStopAuto THEN 
			eStateSystem := E_StateSystem.SemiAuto ;
		END_IF
		
		// Start button light control
		IF bAutomatic THEN 
			fbCmdStartAuto.CmdOn();
		ELSE
			fbCmdStartAuto.CmdBlinkFast(); 				
		END_IF

	E_StateSystem.Fault:
		// Reset enable bits
		bEnabled := FALSE;
		bEnabling := FALSE;
	
		IF fbCmdReset.bFeStatus THEN
			bResetDone		:= FALSE ;
			eStateSystem 	:= E_StateSystem.Resetting ;
		ELSIF GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.FF] THEN 
			ExecSafeStop();
		ELSIF GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.CF] THEN 
			ExecSafeHold();	
		END_IF 
	ELSE 
		;		
END_CASE

bModuleLocked := FALSE ;

IBF_HMI.GVL_HMI.fbHMIControl.sStatusText := TO_STRING(eStateSystem);
]]></ST>
      </Implementation>
    </Method>
    <Action Name="ExecUPS" Id="{f4fba995-87b8-0e1b-28ca-61a8e008cf02}" FolderPath="SystemFunction\">
      <Implementation>
        <ST><![CDATA[// If the system has an UPS, shutdown immediately if power goes down 
fTrigPowerSupply(CLK := ibPowerSupplyOk);
ntShutDown(START := GVL_System.cbUPSPRESENT AND fTrigPowerSupply.Q); 
]]></ST>
      </Implementation>
    </Action>
    <Method Name="Init" Id="{77ed26c7-8922-4741-8b27-ccc11849164f}" FolderPath="ModuleFunctions\">
      <Declaration><![CDATA[METHOD PRIVATE Init : BOOL
VAR_INPUT
END_VAR
VAR
	i : UDINT ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// initialize system functions
IF bIcfAirCheckPresent THEN
	fbAirpressureOk.Init	( 	nId 		:= 1,
								nParentId	:= 0 );
END_IF 

fbCmdReset.Init	(	nId 		:= 2,
							nParentId	:= 0 );

fbValveMainAirSupply.Init(	nId			:= 3,
							nParentId	:= 0,
							eResetState	:= E_ValveResetState.Res_Closed,
							eSafeState	:= E_ValveResetState.Res_Closed);

fbCmdStartSystem.Init	( 	nId 		:= 4,
							nParentId	:= 0 );

fbCmdStartAuto.Init		( 	nId 		:= 5,
							nParentId	:= 0 );

fbCmdStopAuto.Init		( 	nId 		:= 6,
							nParentId	:= 0 );
							
// Initialize all modules
bInitialized	:= TRUE ;
FOR i := 1 TO nNumberOfModules DO 
	IF NOT arpModules[i].pFunction^.bInitialized THEN 
		arpModules[i].pFunction^.CmdInit();
	END_IF
	bInitialized R= NOT arpModules[i].pFunction^.bInitialized;
 END_FOR
 
bInitializing 	:= NOT bInitialized ;
Init := bInitialized ;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>