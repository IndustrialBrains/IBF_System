<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="Fb_SystemFaultHandler" Id="{63d9dbdb-7a1d-43ad-9d1e-008ba0d86cdf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL Fb_SystemFaultHandler
VAR_INPUT
	nNumberOfModules	: UDINT := 0; // Number of modules connected to the system fault handler
	bsystemInitialized	: BOOL 	; // System init is done
END_VAR
VAR_IN_OUT
	arpModules			: ARRAY [1..gvl_main.cnMaxNUMBEROFMODULES] OF Udt_ModuleId ;
END_VAR
VAR_OUTPUT
	// Fault types 
	bSystemFF			: BOOL 	:= FALSE	; // System fatal fault is active
	bSystemCF			: BOOL 	:= FALSE	; // System Cycle fault is active
	bSystemMC 			: BOOL 	:= FALSE	; // a missing condition is active 
	bSystemOM			: BOOL	:= FALSE	; // operator message is active
END_VAR
VAR
	// Message variables
	bCmdSnoozeMessage	: REFERENCE TO BOOL  	:= GVL_Message.bCmdSnoozeMessage; // Snooze message display
	arActiveFaults 		: REFERENCE TO ARRAY [0..Param_Messages.nMAX_MESSAGES_SHOWN] OF UDT_Fault := GVL_Message.arActiveFaults ; // Active faults overview for showing in HMI
	arOperatorMessages	: REFERENCE TO ARRAY [0..Param_Messages.nMAX_MESSAGES_SHOWN] OF STRING ; // Active operator messages
	arOldFaults 		: ARRAY [0..Param_Messages.nMAX_MESSAGES_SHOWN] OF UDT_Fault ; // Old faults overview for comparing to active
	arWriteToLog		: ARRAY [0..Param_Messages.nMAX_MESSAGES_SHOWN] OF UDT_Fault ; // Fault array for writing to log file 
	nNumberOfOM			: UDINT ; // number of active operator messages
	nShownOM			: UDINT ; // currently shown operator message
	// Message logging
	dToday				: DATE 	; 
	nWriteStep			: UDINT := 0 ;
	bWriteError			: BOOL 	; // write to file error occured
	nWriteErroId		: UDINT ; // write error id
	// Write variables
	sActFileName		: STRING;
	hFile				: UINT	:= 0;(* File handle of the source file *)
	sMessageString		: ARRAY [0..Param_Messages.nMESSAGE_COLUMNS] OF STRING (GVL_Parameters.MAX_CSV_FIELD_LENGTH); (* temporary parameter buffer to string*)
	sCSVLine			: T_MaxString := '';(* Single CSV text line (row, record), we are using string as record buffer (your are able to see created fields) *)
	sCSVField			: T_MaxString := '';(* Single CSV field value (column, record field) *)
END_VAR
VAR // functions 
	tofSnoozeMessages	: TOF ; // timer function for message snoozing
	tonOperatorMessageCycle : TON ; // Timer for cycling through operator messages
	// Log to file functions
	fbFileOpen		: FB_FileOpen	;(* Opens file *)
	fbFileClose		: FB_FileClose	;(* Closes file *)
	fbFileGets		: FB_FileGets	;(* Reads one record (line) *)
	fbFilePuts		: FB_FilePuts	;(* Writes one record (line) *)
	fbReader		: FB_CSVMemBufferReader;(* Helper function block used to parse CSV data bytes (single record line) *)
	fbWriter		: FB_CSVMemBufferWriter;(* Helper function block used to create CSV data bytes (single record line) *)
END_VAR 
VAR CONSTANT
	stEmptyMessageUdt : UDT_Fault := (	Active 			:= FALSE,
									FaultType 		:= E_FaultTypes.NA,
									MessageNumber	:= 0,
									LocationNumber	:= 0,
									Discription 	:= '',
									LocationName	:= '',
									ComponentType	:= E_ComponentTypes.NA,
									StartTime		:= DT#2020-1-1-00:00:00,
									EndTime			:= DT#2020-1-1-00:00:00,
									FullFaultId		:= '0'	)  ;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF nNumberOfModules > 0 THEN 
	// Check modules for active messages 
	CheckForModuleFaults();
END_IF

IF bsystemInitialized THEN
	// set system fault bits 
	ExecSetFaultBit(); 
	// Log faults when they are reset
	ExecMessageCompare();
	// Logfile writer 
	ExecWriteToLog();
END_IF

// Message Screen controller 
ExecScreenControl();
]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{d1168527-87de-49aa-89b2-4e5f63714071}" />
    <Method Name="CheckForModuleFaults" Id="{4b59df83-3910-4127-9da2-0705efc500b2}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CheckForModuleFaults : BOOL // check all modules for faults and copy them to the main fault array
VAR
	// functional variables
	i 					: UDINT ;
	j 					: UDINT ;
	// temporary fault storage
	arTempFaults	: ARRAY [0..Param_Messages.nMAX_MESSAGES_SHOWN] OF UDT_Fault ; // internal fault array
	p				: UDINT	;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// reset number of operator messages
MEMSET(destAddr :=ADR(arOperatorMessages), fillByte := 0, n := SIZEOF(arOperatorMessages));
nNumberOfOM := 0;
// Go over modules to check for fault messages 
FOR i := 1 TO nNumberOfModules DO 
	// Check for active messages
	FOR j := 0 TO Param_Messages.nMAX_MESSAGES_SHOWN DO 
		IF arpModules[i].pFunction^.fbFaultHandler.arActiveFaults[j].FaultType = E_FaultTypes.OM THEN 
			arOperatorMessages[nNumberOfOM] := arpModules[i].pFunction^.fbFaultHandler.arActiveFaults[j].Discription ;
			nNumberOfModules := MIN(nNumberOfOM + 1, Param_Messages.nMAX_MESSAGES_SHOWN);		
		ELSIF arpModules[i].pFunction^.fbFaultHandler.arActiveFaults[j].FaultType > E_FaultTypes.OM THEN 
			arTempFaults[p]:= arpModules[i].pFunction^.fbFaultHandler.arActiveFaults[j] ;
			p := MIN( p + 1, Param_Messages.nMAX_MESSAGES_SHOWN);
		ELSE
			EXIT ;
		END_IF
	END_FOR
END_FOR

arOldFaults		:= arActiveFaults 	;
arActiveFaults	:= arTempFaults 	;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecMessageCompare" Id="{dcd002b7-41ad-4179-b8bd-5d15c68a81f8}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ExecMessageCompare : BOOL
VAR
	// functional variables
	i 			: UDINT ;
	j 			: UDINT ;
	bFaultFound : BOOL ;
	p			: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check if any changes occured in the active faults
FOR i := 0 TO Param_Messages.nMAX_MESSAGES_SHOWN DO
	// break loop if fault is empty
	IF  arOldFaults[i].FaultType = E_FaultTypes.NA THEN  
		EXIT;
	ELSE
		// check if the fault is still active
		bFaultFound := FALSE; 
		FOR j := 0 TO Utilities_Library.Param_Messages.nMAX_MESSAGES_SHOWN DO
			IF arOldFaults[i].FullFaultId = arActiveFaults[j].FullFaultId THEN
				bFaultFound := TRUE;
				EXIT;
			END_IF
		END_FOR
		// if the fault is not faund then wrtie it to the logging array for loging
		IF NOT bFaultFound THEN 
			arWriteToLog[p] := arOldFaults[i] ;
			p := p + 1 ; 
		END_IF
	END_IF
END_FOR

ExecSortMessages();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecScreenControl" Id="{97bd5a6e-8490-4360-ab2a-d5203e748724}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ExecScreenControl : BOOL // Control message screen 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[tofSnoozeMessages(IN := bCmdSnoozeMessage, PT := GVL_Message.tMESSAGESNOOZEDURATION);

// Set screen control 
IF bSystemCF OR bSystemFF THEN 
	GVL_Message.bHideFaults := FALSE ;
	GVL_Message.bHideReset	:= FALSE ; 
ELSIF bSystemMC AND NOT tofSnoozeMessages.Q THEN 
	GVL_Message.bHideFaults := FALSE ;
ELSE
	GVL_Message.bHideFaults := TRUE ;
	GVL_Message.bHideReset	:= TRUE ; 
END_IF

// Cycle through operator messages
tonOperatorMessageCycle(PT := Param_Messages.tOMCYCLETIME, IN :=NOT tonOperatorMessageCycle.Q);
IF tonOperatorMessageCycle.Q THEN
	nShownOM := nShownOM +1;
	IF nShownOM >= nNumberOfOM THEN 
		nShownOM := 0;
	END_IF
	Utilities_Library.GVL_Message.sOPeratorMessage := arOperatorMessages[nShownOM];
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSetFaultBit" Id="{8b29bda1-eb98-4ef1-83eb-e8b334d940f7}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ExecSetFaultBit : BOOL
VAR
	// functional variables
	i 			: UDINT ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bSystemFF	:= FALSE ;
bSystemCF	:= FALSE ;
bSystemMC	:= FALSE ;

FOR i := 0 TO Param_Messages.nMAX_MESSAGES_SHOWN DO
	bSystemFF	:= arActiveFaults[i].FaultType = E_FaultTypes.FF OR bSystemFF;
	bSystemCF	:= arActiveFaults[i].FaultType = E_FaultTypes.CF OR bSystemCF;
	bSystemMC	:= arActiveFaults[i].FaultType = E_FaultTypes.MC OR bSystemMC;
	bSystemOM	:= arActiveFaults[i].FaultType = E_FaultTypes.OM OR bSystemOM;
END_FOR


]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecSortMessages" Id="{9379339c-5f6e-4e04-abc6-6a8505afc20b}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD INTERNAL ExecSortMessages : BOOL
VAR
	i : UDINT ;
	k : UDINT ;
	stTempMessageStorage : UDT_Fault ; // Temporary message storage for sorting
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR k := 1 TO Param_Messages.nMAX_MESSAGES_SHOWN - 1 DO 
	FOR i := 0 TO Param_Messages.nMAX_MESSAGES_SHOWN - 2 DO 
		IF arActiveFaults[i].FaultType < arActiveFaults[i+1].FaultType THEN 
			stTempMessageStorage 	:= arActiveFaults[i];
			arActiveFaults[i]		:= arActiveFaults[i+1];
			arActiveFaults[i+1]		:= stTempMessageStorage;
		END_IF
	END_FOR	 
END_FOR

ExecSortMessages := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecWriteToLog" Id="{2fec12f5-ad63-46e4-9c10-f061a916e904}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ExecWriteToLog : BOOL
VAR 
	i : UDINT ; 
	p : UDINT ; // Fault array pointer
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[dToday := DT_TO_DATE(Sys_Variables.SystemTime);
// create file name with Current date 
sActFileName 	:= CONCAT(STR1 := Param_Messages.sLOGFILE_PATH	, STR2 := Param_Messages.sLOGFILE_NAME	);
sActFileName 	:= CONCAT(STR1 := sActFileName					, STR2 := DATE_TO_STRING(dToday)		);
sActFileName 	:= CONCAT(STR1 := sActFileName					, STR2 := '.csv'						);

// ===== Start file write =====
CASE nWriteStep OF
	0:	(* Wait until log array is filled *)
		IF arWriteToLog[0].FaultType <> E_FaultTypes.NA THEN 
			hFile				:= 0;
			nWriteStep 			:= 1;
		ELSE 
			RETURN ;
		END_IF
	1:	(* Open source file *)
		fbFileOpen(  bExecute := FALSE  );
		fbFileOpen( sNetId := GVL_Parameters.sNetId, sPathName := sActFileName , nMode := FOPEN_MODEAPPEND OR FOPEN_MODETEXT,(* Open file in TEXT mode! *)
					ePath := PATH_GENERIC, bExecute := TRUE );
		nWriteStep := nWriteStep + 1 ;
	2:(* Wait until open not busy *)
		fbFileOpen( bExecute := FALSE, bError => bWriteError, nErrID => nWriteErroId, hFile => hFile );
		IF NOT fbFileOpen.bBusy THEN
			IF NOT fbFileOpen.bError THEN
				nWriteStep := nWriteStep + 1 ;
			ELSE(* Error: file not found? *)
				nWriteStep := 100;
			END_IF
		END_IF
	3: (* Check if faultrecord is active if so skip record *)
		nWriteStep := nWriteStep + 1 ;
	4:(* Convert one PLC record to CSV format *)
		sCSVLine := '';
		fbWriter.eCmd := eEnumCmd_First;(* Write first field value *)
		// write message data to string
		sMessageString[0] 	:= TO_STRING(arWriteToLog[p].FaultType				);
		sMessageString[1]	:= DT_TO_STRING(arWriteToLog[p].StartTime			);
		sMessageString[2]	:= DT_TO_STRING(Sys_Variables.SystemTime			);
		sMessageString[3]	:= UDINT_TO_STRING(arWriteToLog[p].MessageNumber	);
		sMessageString[4]	:= UDINT_TO_STRING(arWriteToLog[p].LocationNumber	); 
		sMessageString[5]	:= arWriteToLog[p].Discription						;
		sMessageString[6]	:= arWriteToLog[p].LocationName						;
		sMessageString[7]	:= TO_STRING(arWriteToLog[p].ComponentType			);
		// write data to .csv buffer 
		FOR i := 0 TO Param_Messages.nMESSAGE_COLUMNS BY 1 DO
			sCSVField := STRING_TO_CSVFIELD(in :=  sMessageString[i], FALSE );
			(* Add new field to the record buffer *)
			fbWriter( 	pBuffer := ADR( sCSVLine ), cbBuffer := SIZEOF( sCSVLine ) - 1, putValue := sCSVField, pValue := 0, cbValue := 0,
						bCRLF := ( i = Param_Messages.nMESSAGE_COLUMNS ) );(* bCRLF == TRUE => Write CRLF after the last field value *)
			IF fbWriter.bOk THEN
				fbWriter.eCmd := eEnumCmd_Next;
			ELSE
				nWriteStep := 100;
				RETURN;
			END_IF
		END_FOR(* FOR nColumn := 0... *)

		(* FB_FilePuts adds allready CR (carriage return) to the written line.
		We have to replace the $R$L characters with $L character to avoid double CR. *)
		IF RIGHT( sCSVLine, 2 ) = '$R$L' THEN
			sCSVLine := REPLACE( sCSVLine, '$L', 2, LEN( sCSVLine ) - 1 );
		END_IF
		nWriteStep := nWriteStep + 1 ;
	5:	(* Write single text line to file *)
		fbFilePuts( bExecute := FALSE );
		fbFilePuts( sNetId := GVL_Parameters.sNetId, hFile := hFile, sLine := sCSVLine, bExecute := TRUE );
		nWriteStep := nWriteStep + 1 ;
	6:(* Wait until write not busy *)
		fbFilePuts( bExecute := FALSE, bError => bWriteError, nErrID => nWriteErroId );
		IF NOT fbFilePuts.bBusy THEN
			IF NOT fbFilePuts.bError THEN
				nWriteStep := nWriteStep + 1 ;
			ELSE(* Error *)
				nWriteStep := 100;
			END_IF
		END_IF
	7: (* clear fault from array and go to next fault *)
		arWriteToLog[p]:= stEmptyMessageUdt;
		IF p < Param_Messages.nMAX_MESSAGES_SHOWN THEN 
			p := p +1 ;
		END_IF
		nWriteStep := nWriteStep +1 ;
	8: (* If fault is active then repeat previous step, else close file*)		
		IF  arWriteToLog[p].FaultType <> E_FaultTypes.NA THEN 
			nWriteStep := 3 ;
		ELSE
			nWriteStep := 10;
		END_IF
	10:	(* Close source file *)
		fbFileClose( bExecute := FALSE );
		fbFileClose( sNetId := GVL_Parameters.sNetId, hFile := hFile, bExecute := TRUE );
		nWriteStep := 11;
	11:(* Wait until close not busy *)
		fbFileClose( bExecute := FALSE, bError => bWriteError, nErrID => nWriteErroId );
		IF ( NOT fbFileClose.bBusy ) THEN
			hFile 		:= 0;
			nWriteStep 	:= 100;
		END_IF
	100: (* Error or ready nWriteStep => cleanup *)
		IF ( hFile <> 0 ) THEN
			nWriteStep	:= 10; (* Close the source file *)
		ELSE
			nWriteStep 	:= 0;	(* Ready *)
			ExecWriteToLog := TRUE ;
		END_IF
END_CASE

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>